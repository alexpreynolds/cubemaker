#!/usr/bin/env Rscript

library("optparse")
option_list = list(
    make_option(c("-i", "--input"), type="character", default=NULL, help="input matrix", metavar="character"),
	make_option(c("-o", "--output"), type="character", default=NULL, help="output figure", metavar="character")
);  
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

r2c <- function() {
    hex2dec <- function(hexnums) {
        # suggestion of Eik Vettorazzi
        sapply(strtoi(hexnums, 16L), function(x) x %/% 256^(2:0) %% 256)
    }
    findMatch <- function(dec.col) {
        sq.dist <- colSums((hsv - dec.col)^2)
        rbind(which.min(sq.dist), min(sq.dist))
    }
    colors <- colors()
    hsv <- rgb2hsv(col2rgb(colors))
    function(cols, near=0.25){
        cols <- sub("^#", "", toupper(cols))
        dec.cols <- rgb2hsv(hex2dec(cols))
        which.col <- apply(dec.cols, 2, findMatch)
        matches <- colors[which.col[1, ]]
        unmatched <- which.col[2, ] > near^2
        matches[unmatched] <- paste("#", cols[unmatched], sep="")
        matches
    }
}
rgb2col <- r2c()

df <- read.table(opt$input, header=TRUE, sep="\t")
for (i in 1:nrow(df)) {
    c <- as.vector(unlist(strsplit(as.character(df$rgb[i]), ',')))
    c <- as.numeric(c)
    rgb_v <- rgb(red=c[1]/255, green=c[2]/255, blue=c[3]/255)
    col_v <- rgb2col(c(tolower(rgb_v)))
    df$col[i] <- col_v
}
featureRadius <- 15
featureShininess <- 20
featureTransparency <- 1
thetaStart <- 155

library("rgl")
rgl.open()
offset <- 50
par3d(windowRect=c(offset, offset, 1280+offset, 1280+offset))
rm(offset)
rgl.clear()
rgl.viewpoint(theta=thetaStart, phi=30, fov=30, zoom=1)
spheres3d(df[,3], df[,4], df[,5], radius=featureRadius, color=df$col, alpha=featureTransparency, shininess=featureShininess)
aspect3d(1, 1, 1)
axes3d(col='black', box=FALSE, labels=FALSE, tick=FALSE)
title3d("", "", "X", "Y", "Z", col='black', line=1)
texts3d(df[,3], df[,4], df[,5], text=df$point_label, color="blue", adj=c(0,0))
bg3d("white")
rgl.clear(type='lights')
rgl.light(-45, 20, ambient='black', diffuse='#dddddd', specular='white')
rgl.light(60, 30, ambient='#dddddd', diffuse='#dddddd', specular='black')
rgl.postscript(opt$output, fmt="pdf")